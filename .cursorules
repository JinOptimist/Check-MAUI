# Cursor Rules: File Structure Guidelines for this MAUI project

## Purpose
All contributors must keep the project aligned with the agreed MAUI structure to maintain clarity and scale safely.

## Required structure (top-level)
- Keep only application bootstrap files at the root:
  - `App.xaml`, `App.xaml.cs`, `AppShell.xaml`, `AppShell.xaml.cs`, `MauiProgram.cs`, `GlobalUsings.cs`, `*.csproj`
- Place platform-specific code in `Platforms/<Platform>/` (Android, iOS, MacCatalyst, Windows, Tizen).
- Place shared resources in `Resources/` organized by type (`Styles`, `Fonts`, `Images`, `Raw`, `AppIcon`, `Splash`).

## UI and MVVM
- Put XAML pages in `Views/Pages/` with matching `.xaml.cs` beside them.
- Put custom controls in `Views/Controls/` and data templates in `Views/Templates/`.
- Put behaviors and converters under `Views/Behaviors/` and `Views/Converters/` respectively.
- Put view models in `ViewModels/` (e.g., `MainPage` ↔ `MainPageViewModel`).
- Put domain models in `Models/`.

## Services and Data
- Put application services in `Services/` (subfolders by domain, e.g., `Api/`, `Storage/`).
- Put repositories and data access in `Data/` (e.g., `Repositories/`, `LocalDb/`).

## Logging
- Use `Microsoft.Extensions.Logging` `ILogger<T>` via DI; avoid static/global loggers.
- Prefer structured logging with named properties (e.g., `{HeroId}`, `{Operation}`) over string concatenation.
- Choose levels appropriately: `Trace/Debug` (dev diagnostics), `Information` (key lifecycle events), `Warning` (recoverable anomalies), `Error` (failures), `Critical` (app-threatening issues).
- Include actionable context (IDs, counts, elapsed time); never log secrets or PII.
- Log exceptions with stack trace using `logger.LogError(ex, "... {Context}", ...)`.
- For long-running operations, log start and completion with duration.
- For public APIs/background jobs, prefer using `EventId` to aid filtering.
- Добавляйте информативные логи — это ускорит поиск и устранение проблем в коде.

## Namespaces
- Namespaces must mirror folders (e.g., `HelloMaui.Views.Pages.MainPage`).
- XAML `x:Class` should match the fully qualified type.
- XAML namespace mappings (e.g., `xmlns:local`) must be updated when files move.

## PR checklist
- New pages go under `Views/Pages/` with paired `.xaml.cs`.
- Updated/moved files have corrected namespaces and `x:Class`.
- No XAML or page code-behind files in the repository root.
- Platform-specific changes remain under `Platforms/*` only.
- После любого изменения кода, проверять что проект билдиться
- В Cursor: после применённых edits автоматически выполнять сборку
  - Windows PowerShell: `dotnet build HelloMaui.sln -c Debug`
  - Ошибки сборки исправлять до следующих изменений кода

## Documentation
- Keep all project documentation in `documentation/` at the root.
- `documentation/overview.md` — high-level app overview.
- `documentation/requirements/` — requirements and documentation rules.
- `documentation/technical/` — technical docs:
  - `getting-started.md` — how to run the project;
  - `technology-stack.md` — technologies and versions;
  - `architecture.md` — architecture overview.
- Any structure changes must be reflected in `documentation/technical/file-structure.md`.


